#!/usr/bin/env python3
#vim: ft=python

"""
    Runs all tests in the specified directory.
    Supports discovery of doc tests in source files.
"""


import argparse
import doctest
import importlib
import os
import re
import sys
import unittest
import functools as fp

from os import walk
from pathlib import Path

from colour_runner.runner import ColourTextTestRunner
from functional import seq
from functional.util import compose


def main():
    parser = argparse.ArgumentParser(description='test runner for the chess project')
    parser.add_argument('-v', '--verbose', type=int, default=1)
    parser.add_argument(
        '-r', '--root', default='.',
        help='The root of the project',
        dest='test_dir',
    )
    parser.add_argument(
        '-s', '--source-root', required=True,
        help='The base source directory to search in for doc tests',
        dest='src_dir',
    )

    args = parser.parse_args(sys.argv[1:])
    try:
        validate_and_clean_args(args)
    except ValidationError as e:
        print(f'args.prog: error: {e}', file=sys.stderr)
        sys.exit(1)

    sys.path.append(args.src_dir)
    sys.path.append(args.test_dir)

    suite = unittest.TestSuite()
    suite = load_tests(args.test_dir, unittest.TestLoader(), suite, 'test*.py')
    suite = load_doctests(args.src_dir, unittest.TestLoader(), suite)

    ColourTextTestRunner(verbosity=args.verbose).run(suite)

def validate_and_clean_args(args):
    if not args.src_dir or not os.path.isdir(args.src_dir):
        raise ValidationError(f'source root "{args.src_dir}" either does not exist or is not a directory')
    args.src_dir = os.path.abspath(args.src_dir)

    if not args.test_dir or not os.path.isdir(args.test_dir):
        raise ValidationError(f'test root dir "{args.test_dir}" either does not exist or is not a directory')
    args.test_dir = os.path.abspath(args.test_dir)

def load_tests(base_dir, loader, standard_tests, pattern):
    standard_tests.addTests(loader.discover(
        start_dir=base_dir, pattern=pattern
    ))
    return standard_tests


def load_doctests(base_dir, loader, suite):
    files = [os.path.join(dirpath, f)
             for dirpath, _, filenames in os.walk(base_dir)
             for f in filenames]

    def convert_to_python_import(path):
        strip_src_dir_prefix = lambda s: s[len(base_dir):] if s.startswith(base_dir) else s
        strip_dot_py = lambda s: s[:-len('.py')] if s.endswith('.py') else s
        strip_dots = lambda s: s.strip('.')

        # if something breaks just put this in the compose below somewhere
        def debug(s):
            print(s)
            return s

        return compose(strip_dots, _to_dotted_path, strip_src_dir_prefix, strip_dot_py)(path)

    py_files = (convert_to_python_import(f) for f in files if f.endswith('.py'))

    for fname in py_files:
        print(fname)
        f_module = importlib.import_module(fname, package='src')
        file_suite = doctest.DocFileSuite(os.path.join(base_dir, re.sub('\.', '/', fname) + '.py'), globs=vars(f_module), module_relative=False)
        suite.addTests(file_suite)

    return suite


def _to_dotted_path(path): return re.sub('/', '.', path)


class ValidationError(Exception):
    pass

if __name__ == '__main__':
    main()
